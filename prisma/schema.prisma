generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model staff {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(25)
  address      String   @db.VarChar(100)
  phone_number String   @db.VarChar(20)
  user         user?
  createdAt    DateTime @default(now()) @db.Timestamptz()
  updatedAt    DateTime @updatedAt
}

model student {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(50)
  phone_number String   @db.VarChar(20)
  address      String   @db.VarChar(100)
  gender       gender?
  username     String   @unique @db.VarChar(150)
  password     String   @db.VarChar(255)
  loan         loan[]
  role         role     @default(siswa)
  createdAt    DateTime @default(now()) @db.Timestamptz()
  updatedAt    DateTime @updatedAt
}

model user {
  id        Int      @id @default(autoincrement())
  role      role?
  username  String   @unique
  password  String   @db.VarChar(100)
  staff_id  Int      @unique
  staff     staff?   @relation(fields: [staff_id], references: [id], onDelete: Restrict)
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()
}

model category {
  id            Int      @id @default(autoincrement())
  category_name String   @unique @db.VarChar(20)
  book          book[]
  createdAt     DateTime @default(now()) @db.Timestamptz()
  updatedAt     DateTime @updatedAt
}

model author {
  id           Int            @id @default(autoincrement())
  author_name  String         @unique @db.VarChar(20)
  author_image String?        @db.VarChar(200)
  phone_number String         @db.VarChar(20)
  address      String         @db.VarChar(100)
  author_books author_books[]
  createdAt    DateTime       @default(now()) @db.Timestamptz()
  updatedAt    DateTime       @updatedAt
}

model book {
  id           Int            @id @default(autoincrement())
  book_title   String         @unique @db.VarChar(150)
  book_cover   String?        @db.VarChar(200)
  category_id  Int
  release_date String         @db.VarChar(20)
  loan_details loan_details[]
  author_books author_books[]
  bookshelf    bookshelf?
  category     category       @relation(fields: [category_id], references: [id])
  createdAt    DateTime       @default(now()) @db.Timestamptz()
  updatedAt    DateTime       @updatedAt
}

model author_books {
  id        Int      @id @default(autoincrement())
  author_id Int
  book_id   Int
  author    author   @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  book      book     @relation(fields: [book_id], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt
}

model shelf {
  id         Int         @id @default(autoincrement())
  shelf_code String      @unique @db.VarChar(100)
  bookshelf  bookshelf[]
  createdAt  DateTime    @default(now()) @db.Timestamptz()
  updatedAt  DateTime    @updatedAt
}

model bookshelf {
  id        Int      @id @default(autoincrement())
  shelf_id  Int
  book_id   Int      @unique
  shelf     shelf    @relation(fields: [shelf_id], references: [id])
  book      book     @relation(fields: [book_id], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt
}

model loan {
  id             Int            @id @default(autoincrement())
  student_id     Int
  loan_status    loan_status    @default(pending)
  loan_details   loan_details[]
  description    String?        @db.VarChar(255)
  loan_penalties String?        @db.VarChar(150)
  loan_date      DateTime       @default(now()) @db.Timestamptz()
  due_date       DateTime
  student        student        @relation(fields: [student_id], references: [id])
  createdAt      DateTime       @default(now()) @db.Timestamptz()
  updatedAt      DateTime       @updatedAt
}

model loan_details {
  id                 Int                @id @default(autoincrement())
  loan_id            Int
  book_id            Int
  loan_detail_status loan_detail_status @default(pending)
  description        String?            @db.VarChar(255)
  book               book               @relation(fields: [book_id], references: [id])
  loan               loan               @relation(fields: [loan_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt          DateTime           @default(now()) @db.Timestamptz()
  updatedAt          DateTime           @updatedAt
}

enum role {
  admin
  operator
  siswa
}

enum gender {
  male
  female
}

enum loan_status {
  done
  pending
}

enum loan_detail_status {
  returned
  pending
  missing
}
